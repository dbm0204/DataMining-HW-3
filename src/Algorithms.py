from utils import Attribute, Data, DataSet

def CreateC1(DataSet):
	c1 =[]
	for transaction in DataSet:
		for item in transaction:
			if not [item] in c1:
				c1.append([item])
	c1.sort()
return map(frozenset,c1)


def scanData(DataSet,candidates,min_Support):
# returns a list of candidates that meets a minimum support level
	sscnt = {}
	for tid in DataSet:
		for candid in candidates:
			if candid.issubset(tid):
				sscnt.setdefault(can,0)
				sscant[can] += 1
	num_items = float(len(DataSet))
	retlist =[]
	support_data = {}
	for key in sscnt:
		support = sscnt[key]/num_items
		if support >= min_Support:
			retlist.insert(0,key)
		support_data[key] =support

return retlist,support_data

def calculate_Confidence(freqSets,support_data,rules,min_confidence):
# Evlauate the rule generated by calculating 
# the confidence of the itemset
	pruned_H =[]
	for conseq in H:
		conf = support_data[freqSets]/support_data[freqSets-conseq]
		if conf >= min_confidence:
			print freqSet - conseq, '--->', conseq, 'conf:', conf
            rules.append((freqSet - conseq, conseq, conf))
            pruned_H.append(conseq)
return pruned_H


def rules_from_conseq(freqSet, H, support_data, rules, min_confidence):
    "Generate a set of candidate rules"
    m = len(H[0])
    if (len(freqSet) > (m + 1)):
        Hmp1 = aprioriGen(H, m + 1)
        Hmp1 = calc_confidence(freqSet, Hmp1,  support_data, rules, min_confidence)
        if len(Hmp1) > 1:
            rules_from_conseq(freqSet, Hmp1, support_data, rules, min_confidence)


def aprioriGen(freq_sets,k):
#Generates the joint transactions from the the candidate sets
	retlist =[]
	lenLk =len(freq_sets)
	for i in range(i+1,lenLk):
		l1 = list(freq_sets[i])[:k-2]
		l2 = list(freq_sets[j])[:k-2]
		l1.sort()
		l2.sort()
		if l1 ==l2:
			retlist.append(freq_sets[i]|freq_sets[j])
return retlist

def generateRules(L, support_data, min_confidence=0.7):
    #Create the association rules
    #L: list of frequent item sets
    #support_data: support data for those itemsets
    #min_confidence: minimum confidence threshold
    rules = []
    for i in range(1, len(L)):
        for freqSet in L[i]:
            H1 = [frozenset([item]) for item in freqSet]
            print "freqSet", freqSet, 'H1', H1
            if (i > 1):
                rules_from_conseq(freqSet, H1, support_data, rules, min_confidence)
            else:
                calc_confidence(freqSet, H1, support_data, rules, min_confidence)
return rules

def apriori(DataSet,min_Support):
# Generate a list of candidate item sets
	c1 = CreateC1(DataSet)
	D = map(set,DataSet)
	L1,support_data = scanData(D,c1,min_Support)
	l= [L1]
	k=2
	while(len(l[k-2]>0)):
		Ck = aprioriGen(l[k-2],k)
		Lk,supK =scanData(D,Ck,min_Support)
		l.append(Lk)
		K+=1
return l, support_data